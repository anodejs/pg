var ssltunnel = require('ssltunnel');
var urlparser = require('url').parse;
var path = require('path');

module.exports = function (serverurl, options, callback) {

  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  var url = urlparser(serverurl);

  console.log('url:', serverurl);

  if (!url.protocol.match(/^.*s:$/i)) {
    // No need to redirect if protocol is not ssl.
    console.log('anode tunnel does not redirect if protocol is not ssl, protocol:', url.protocol);
    return callback(null, serverurl);
  }

  var rebus = require('rebus')(process.env.ANODE_REBUS);

  // Redirect via SSL tunnel.
  if (!rebus.value.farmrepo || !rebus.value.farmrepo.workdir) {
    return callback(new Error('unable to find farm repo certs'));
  }

  // If farm repoository is relative path, it is relative to rebus directory. It happens only
  // in dev environment.
  // In production, the farm repository is absolute path.
  var farmrepodir = path.resolve(process.env.ANODE_REBUS, rebus.value.farmrepo.workdir);
  var certs = path.join(farmrepodir, 'certs', 'intra');

  console.log('anode tunnel certificates from', certs);

  var sslOptions = {
    client_public_cert: path.join(certs, 'cc_public.pem'),
    server_public_cert: path.join(certs, 'sc_public.pem'),
    client_private_cert: path.join(certs, 'cc_private.pem'),
    server_host: url.hostname,
    server_port: url.port,
    proxy_port: 0,
    keep_alive: 30000,
    log_level: options.log_level
  };

  ssltunnel.createClient(sslOptions, function (err, port) {
    if (err) {
      console.error('failed to redirect to ssl server, err:', err);
      return callback(err);
    }
    // Remove 's' suffix to get the unsecured protocol name.
    var protocol = url.protocol.replace(/s:$/i, ':');
    var tunnelurl = protocol + '//localhost:' + port.toString() + url.path;
    console.log('anode tunnel url:', tunnelurl);
    callback(null, tunnelurl);
  });
}