{
  "name": "azure",
  "author": {
    "name": "Microsoft Corporation"
  },
  "version": "0.6.3",
  "description": "Windows Azure Client Library for node and Command Line Tool",
  "tags": [
    "azure",
    "sdk"
  ],
  "keywords": [
    "node",
    "azure"
  ],
  "main": "./lib/azure.js",
  "engines": {
    "node": ">= 0.6.15"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {
    "xml2js": "0.1.x",
    "sax": ">= 0.1.1",
    "qs": ">= 0.3.1",
    "log": ">= 1.2.0",
    "xmlbuilder": ">= 0.3.1",
    "mime": ">= 1.2.4",
    "dateformat": "1.0.2-1.2.3",
    "underscore": ">= 1.3.1",
    "underscore.string": ">= 2.0.0",
    "node-uuid": "> = 1.2.0",
    "tunnel": ">= 0.0.1",
    "async": ">= 0.1.18",
    "streamline": "0.2.4",
    "commander": ">= 0.5.2",
    "winston": ">= 0.5.10",
    "colors": "0.x.x",
    "eyes": "0.x.x",
    "easy-table": "0.0.1",
    "request": ">= 2.9.203"
  },
  "devDependencies": {
    "mocha": "*",
    "jshint": "*",
    "sinon": "*",
    "should": "*"
  },
  "homepage": "http://github.com/WindowsAzure/azure-sdk-for-node",
  "repository": {
    "type": "git",
    "url": "git@github.com:WindowsAzure/azure-sdk-for-node.git"
  },
  "bugs": {
    "url": "http://github.com/WindowsAzure/azure-sdk-for-node/issues"
  },
  "scripts": {
    "test": "node test/runtests.js testlist.txt",
    "jshint": "node test/runjshint.js",
    "coverage": "node test/runtests.js testlist.txt -coverage > coverage.html",
    "extendedtests": "node test/runtests.js extendedtestlist.txt"
  },
  "bin": {
    "azure": "./bin/azure"
  },
  "readme": "# Windows Azure SDK for Node.js\r\n\r\nThis project provides a Node.js package that makes it easy to access Windows Azure Services like Table Storage and Service Bus. It also includes a cross platform command line tool for managing Windows Azure Websites and Virtual Machines.\r\n\r\nWith Windows Azure Websites you can deploy node.js applications to the cloud in just seconds using git. \r\n\r\nFor documentation on how to host Node.js applications on Windows Azure, please see the [Windows Azure Node.js Developer Center](http://www.windowsazure.com/en-us/develop/nodejs/).\r\n\r\nFor documentation on the new cross platform CLI tool for Mac and Linux, please see this [reference](http://go.microsoft.com/fwlink/?LinkId=252246&clcid=0x409) and this [How to Guide](http://www.windowsazure.com/en-us/develop/nodejs/how-to-guides/command-line-tools/)\r\n\r\nCheck out our new IRC channel on freenode, node-azure.\r\n\r\n# CLI Features\r\n\r\n* Websites\r\n\t* Create and manage WindowsAzure websites\r\n    * Download site logs\r\n    * Manage Deployments\r\n* Virtual machines\r\n    * Create and manage Windows and Linux Virtual machines\r\n\t* Create and manage VM endpoints\r\n    * Create and manage Virtual Machine Images\r\n    * Create and manage certificates\r\n\r\n# Library Features\r\n\r\n* Tables\r\n    * create and delete tables\r\n    * create, query, insert, update, merge, and delete entities\r\n* Blobs\r\n    * create, list, and delete containers, work with container metadata and permissions, list blobs in container\r\n    * create block and page blobs (from a stream, a file, or a string), work with blob blocks and pages, delete blobs\r\n    * work with blob properties, metadata, leases, snapshot a blob\r\n* Storage Queues\r\n    * create, list, and delete queues, and work with queue metadata\r\n    * create, get, peek, update, delete messages\r\n* Service Bus\r\n    * Queues: create, list and delete queues; create, list, and delete subscriptions; send, receive, unlock and delete messages\r\n    * Topics: create, list, and delete topics; create, list, and delete rules\r\n* Service Runtime\r\n    * discover addresses and ports for the endpoints of other role instances in your service\r\n    * get configuration settings and access local resources\r\n    * get role instance information for current role and other role instances\r\n    * query and set the status of the current role\r\n\r\n# Getting Started\r\n## Download Source Code\r\n\r\nTo get the source code of the SDK via **git** just type:\r\n\r\n    git clone https://github.com/WindowsAzure/azure-sdk-for-node.git\r\n    cd ./azure-sdk-for-node\r\n\r\n## Download Package\r\n\r\nAlternatively, to get the source code via the Node Package Manager (npm), type\r\n\r\n    npm install azure\r\n\r\nYou can use these packages against the cloud Windows Azure Services, or against\r\nthe local Storage Emulator (with the exception of Service Bus features).\r\n\r\n1. To use the cloud services, you need to first create an account with Windows Azure. To use the storage services, you need to set the AZURE_STORAGE_ACCOUNT and the AZURE_STORAGE_ACCESS_KEY environment variables to the storage account name and primary access key you obtain from the Azure Portal. To use Service Bus, you need to set the AZURE_SERVICEBUS_NAMESPACE and the AZURE_SERVICEBUS_ACCESS_KEY environment variables to the service bus namespace and the default key you obtain from the Azure Portal.\r\n2. To use the Storage Emulator, make sure the latest version of the Windows Azure SDK is installed on the machine, and set the EMULATED environment variable to any value (\"true\", \"1\", etc.)\r\n\r\n# Usage\r\n## Table Storage\r\n\r\nTo ensure a table exists, call **createTableIfNotExists**:\r\n\r\n```Javascript\r\nvar tableService = azure.createTableService();\r\ntableService.createTableIfNotExists('tasktable', function(error){\r\n    if(!error){\r\n        // Table exists\r\n    }\r\n});\r\n```\r\nA new entity can be added by calling **insertEntity**:\r\n\r\n```Javascript\r\nvar tableService = azure.createTableService(),\r\n    task1 = {\r\n        PartitionKey : 'tasksSeattle',\r\n        RowKey: '1',\r\n        Description: 'Take out the trash',\r\n        DueDate: new Date(2011, 12, 14, 12) \r\n    };\r\ntableService.insertEntity('tasktable', task1, function(error){ \r\n    if(!error){\r\n        // Entity inserted\r\n    }\r\n});\r\n```\r\n\r\nThe method **queryEntity** can then be used to fetch the entity that was just inserted:\r\n\r\n```Javascript\r\nvar tableService = azure.createTableService();\r\ntableService.queryEntity('tasktable', 'tasksSeattle', '1', function(error, serverEntity){\r\n    if(!error){\r\n        // Entity available in serverEntity variable\r\n    }\r\n});\r\n```\r\n\r\n## Blob Storage\r\n\r\nThe **createContainerIfNotExists** method can be used to create a \r\ncontainer in which to store a blob:\r\n\r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\nblobService.createContainerIfNotExists('taskcontainer', {publicAccessLevel : 'blob'}, function(error){\r\n    if(!error){\r\n        // Container exists and is public\r\n    }\r\n});\r\n```\r\n\r\nTo upload a file (assuming it is called task1-upload.txt, it contains the exact text \"hello world\" (no quotation marks), and it is placed in the same folder as the script below), the method **createBlockBlobFromStream** can be used:\r\n\r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\nblobService.createBlockBlobFromStream('taskcontainer', 'task1', fs.createReadStream('task1-upload.txt'), 11, function(error){\r\n    if(!error){\r\n        // Blob uploaded\r\n    }\r\n});\r\n```\r\n\r\nTo download the blob and write it to the file system, the **getBlobToStream** method can be used:\r\n\r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\nblobService.getBlobToStream('taskcontainer', 'task1', fs.createWriteStream('task1-download.txt'), function(error, serverBlob){\r\n    if(!error){\r\n        // Blob available in serverBlob.blob variable\r\n    }\r\n});\r\n```\r\n\r\n## Storage Queues\r\n\r\nThe **createQueueIfNotExists** method can be used to ensure a queue exists:\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService();\r\nqueueService.createQueueIfNotExists('taskqueue', function(error){\r\n    if(!error){\r\n        // Queue exists\r\n    }\r\n});\r\n```\r\n\r\nThe **createMessage** method can then be called to insert the message into the queue:\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService();\r\nqueueService.createMessage('taskqueue', \"Hello world!\", function(error){\r\n    if(!error){\r\n        // Message inserted\r\n    }\r\n});\r\n```\r\n\r\nIt is then possible to call the **getMessage** method, process the message and then call **deleteMessage** inside the callback. This two-step process ensures messages don't get lost when they are removed from the queue.\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService(),\r\n    queueName = 'taskqueue';\r\nqueueService.getMessages(queueName, function(error, serverMessages){\r\n    if(!error){\r\n        // Process the message in less than 30 seconds, the message\r\n        // text is available in serverMessages[0].messagetext \r\n\r\n        queueService.deleteMessage(queueName, serverMessages[0].messageid, serverMessages[0].popreceipt, function(error){\r\n            if(!error){\r\n                // Message deleted\r\n            }\r\n        });\r\n    }\r\n});\r\n```\r\n\r\n## Service Bus Queues\r\n\r\nService Bus Queues are an alternative to Storage Queues that might be useful in scenarios where more advanced messaging features are needed (larger message sizes, message ordering, single-operaiton destructive reads, scheduled delivery) using push-style delivery (using long polling).\r\n\r\nThe **createQueueIfNotExists** method can be used to ensure a queue exists:\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.createQueueIfNotExists('taskqueue', function(error){\r\n    if(!error){\r\n        // Queue exists\r\n    }\r\n});\r\n```\r\n\r\nThe **sendQueueMessage** method can then be called to insert the message into the queue:\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.sendQueueMessage('taskqueue', 'Hello world!', function(\r\n    if(!error){\r\n        // Message sent\r\n     }\r\n});\r\n```\r\n\r\nIt is then possible to call the **receiveQueueMessage** method to dequeue the message.\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.receiveQueueMessage('taskqueue', function(error, serverMessage){\r\n    if(!error){\r\n        // Process the message\r\n    }\r\n});\r\n```\r\n\r\n## Service Bus Topics\r\n\r\nService Bus topics are an abstraction on top of Service Bus Queues that make pub/sub scenarios easy to implement.\r\n\r\nThe **createTopicIfNotExists** method can be used to create a server-side topic:\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.createTopicIfNotExists('taskdiscussion', function(error){\r\n    if(!error){\r\n        // Topic exists\r\n    }\r\n});\r\n```\r\n\r\nThe **sendTopicMessage** method can be used to send a message to a topic:\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.sendTopicMessage('taskdiscussion', 'Hello world!', function(error){\r\n    if(!error){\r\n        // Message sent\r\n    }\r\n});\r\n```\r\n\r\nA client can then create a subscription and start consuming messages by calling the **createSubscription** method followed by the **receiveSubscriptionMessage** method. Please note that any messages sent before the subscription is created will not be received.\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService(),\r\n    topic = 'taskdiscussion',\r\n    subscription = 'client1';\r\n\r\nserviceBusService.createSubscription(topic, subscription, function(error1){\r\n    if(!error1){\r\n        // Subscription created\r\n\r\n        serviceBusService.receiveSubscriptionMessage(topic, subscription, function(error2, serverMessage){\r\n            if(!error2){\r\n                // Process message\r\n            }\r\n        });\r\n     }\r\n});\r\n```\r\n\r\n## Service Runtime\r\n\r\nThe Service Runtime allows you to interact with the machine environment where the current role is running. Please note that these commands will only work if your code is running in a worker role inside the Azure emulator or in the cloud.\r\n\r\nThe **isAvailable** method lets you determine whether the service runtime endpoint is running on the local machine.  It is good practice to enclose any code that \r\nuses service runtime in the isAvailable callback.\r\n\r\n```JavaScript\r\nazure.RoleEnvironment.isAvailable(function(error, available) {\r\n    if (available) {\r\n        // Place your calls to service runtime here\r\n    }\r\n});\r\n```\r\n\r\nThe **getConfigurationSettings** method lets you obtain values from the role's .cscfg file.\r\n\r\n```Javascript\r\nazure.RoleEnvironment.getConfigurationSettings(function(error, settings) {\r\n    if (!error) {\r\n        // You can get the value of setting \"setting1\" via settings['setting1']\r\n    }        \r\n});\r\n```\r\n\r\nThe **getLocalResources** method lets you find the path to defined local storage resources for the current role.  For example, the DiagnosticStore \r\nresource which is defined for every role provides a location for runtime diagnostics and logs.\r\n\r\n```Javascript\r\nazure.RoleEnvironment.getLocalResources(function(error, resources) {\r\n    if(!error){\r\n        // You can get the path to the role's diagnostics store via \r\n        // resources['DiagnosticStore']['path']\r\n    }\r\n});\r\n```\r\n\r\nThe **getCurrentRoleInstance** method lets you obtain information about endpoints defined for the current role instance:\r\n\r\n```JavaScript\r\nazure.RoleEnvironment.getCurrentRoleInstance(function(error, instance) {\r\n    if (!error && instance['endpoints']) {\r\n        // You can get information about \"endpoint1\" such as its address and port via\r\n        // instance['endpoints']['endpoint1']['address'] and instance['endpoints']['endpoint1']['port']\r\n    }\r\n});\r\n```\r\n\r\nThe **getRoles** method lets you obtain information about endpoints in role instances running on other machines:\r\n\r\n```Javascript\r\nazure.RoleEnvironment.getRoles(function(error, roles) {\r\n    if(!error){\r\n        // You can get information about \"instance1\" of \"role1\" via roles['role1']['instance1']\r\n    } \r\n});\r\n```\r\n\r\n\r\n**For more examples please see the [Windows Azure Node.js Developer Center](http://www.windowsazure.com/en-us/develop/nodejs)**\r\n\r\n# Need Help?\r\n\r\nBe sure to check out the Windows Azure [Developer Forums on Stack Overflow](http://go.microsoft.com/fwlink/?LinkId=234489) if you have trouble with the provided code.\r\n\r\n# Contribute Code or Provide Feedback\r\n\r\nIf you would like to become an active contributor to this project please follow the instructions provided in [Windows Azure Projects Contribution Guidelines](http://windowsazure.github.com/guidelines.html).\r\n\r\nIf you encounter any bugs with the library please file an issue in the [Issues](https://github.com/WindowsAzure/azure-sdk-for-node/issues) section of the project.\r\n\r\n# Learn More\r\n[Windows Azure Node.js Developer Center](http://www.windowsazure.com/en-us/develop/nodejs/)\r\n",
  "_id": "azure@0.6.3",
  "dist": {
    "shasum": "e5592f9325a43404ae7c93be3c35c9ba9f8b6894"
  },
  "_from": "azure"
}
