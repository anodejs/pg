{
  "name": "tunnel",
  "version": "0.0.1",
  "description": "Node HTTP/HTTPS Agents for tunneling proxies",
  "keywords": [
    "http",
    "https",
    "agent",
    "proxy"
  ],
  "homepage": "https://github.com/koichik/node-tunnel/",
  "author": {
    "name": "Koichi Kobayashi",
    "email": "koichik@improvement.jp"
  },
  "main": "./index.js",
  "licenses": {
    "type": "The MIT License",
    "url": "http://www.opensource.org/licenses/mit-license.php"
  },
  "repositories": "https://github.com/koichik/node-tunnel.git",
  "engines": {
    "node": ">=0.6.11 <=0.7.0 || >=0.7.3"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "readme": "# node-tunnel - HTTP/HTTPS Agents for tunneling proxies\n\n## Example\n\n    var tunnel = require('tunnel');\n\n    var myAgent = tunnel.httpsOverHttp({\n      proxy: {\n        host: 'localhost',\n        port: 3128\n      }\n    });\n\n    var req = https.request({\n      host: 'example.com',\n      port: 443,\n      agent: myAgent\n    });\n\n## Installation\n\n    $ npm install tunnel\n\n## Usages\n\n### HTTP over HTTP tunneling\n\n    var myAgent = tunnel.httpOverHttp({\n      maxSockets: poolSize, // Defaults to 5\n\n      proxy: { // Proxy settings\n        host: proxyHost, // Defaults to 'localhost'\n        port: proxyPort, // Defaults to 80\n\n        // Basic authorization for proxy server if necessary\n        proxyAuth: 'user:password',\n\n        // Header fields for proxy server if necessary\n        headers: {\n          'User-Agent': 'Node'\n        }\n      }\n    });\n\n    var req = http.request({\n      host: 'example.com',\n      port: 80,\n      agent: myAgent\n    });\n\n### HTTPS over HTTP tunneling\n\n    var myAgent = tunnel.httpsOverHttp({\n      maxSockets: poolSize, // Defaults to 5\n\n      // CA for origin server if necessary\n      ca: [ fs.readFileSync('origin-server-ca.pem')],\n\n      // Client certification for origin server if necessary\n      key: fs.readFileSync('origin-server-key.pem'),\n      cert: fs.readFileSync('origin-server-cert.pem'),\n\n      proxy: { // Proxy settings\n        host: proxyHost, // Defaults to 'localhost'\n        port: proxyPort, // Defaults to 80\n\n        // Basic authorization for proxy server if necessary\n        proxyAuth: 'user:password',\n\n        // Header fields for proxy server if necessary\n        headers: {\n          'User-Agent': 'Node'\n        },\n      }\n    });\n\n    var req = https.request({\n      host: 'example.com',\n      port: 443,\n      agent: myAgent\n    });\n\n### HTTP over HTTPS tunneling\n\n    var myAgent = tunnel.httpOverHttps({\n      maxSockets: poolSize, // Defaults to 5\n\n      proxy: { // Proxy settings\n        host: proxyHost, // Defaults to 'localhost'\n        port: proxyPort, // Defaults to 443\n\n        // Basic authorization for proxy server if necessary\n        proxyAuth: 'user:password',\n\n        // Header fields for proxy server if necessary\n        headers: {\n          'User-Agent': 'Node'\n        },\n\n        // CA for proxy server if necessary\n        ca: [ fs.readFileSync('origin-server-ca.pem')],\n\n        // Client certification for proxy server if necessary\n        key: fs.readFileSync('origin-server-key.pem'),\n        cert: fs.readFileSync('origin-server-cert.pem'),\n      }\n    });\n\n    var req = http.request({\n      host: 'example.com',\n      port: 80,\n      agent: myAgent\n    });\n\n### HTTPS over HTTPS tunneling\n\n    var myAgent = tunnel.httpsOverHttps({\n      maxSockets: poolSize, // Defaults to 5\n\n      // CA for origin server if necessary\n      ca: [ fs.readFileSync('origin-server-ca.pem')],\n\n      // Client certification for origin server if necessary\n      key: fs.readFileSync('origin-server-key.pem'),\n      cert: fs.readFileSync('origin-server-cert.pem'),\n\n      proxy: { // Proxy settings\n        host: proxyHost, // Defaults to 'localhost'\n        port: proxyPort, // Defaults to 443\n\n        // Basic authorization for proxy server if necessary\n        proxyAuth: 'user:password',\n\n        // Header fields for proxy server if necessary\n        headers: {\n          'User-Agent': 'Node'\n        }\n\n        // CA for proxy server if necessary\n        ca: [ fs.readFileSync('origin-server-ca.pem')],\n\n        // Client certification for proxy server if necessary\n        key: fs.readFileSync('origin-server-key.pem'),\n        cert: fs.readFileSync('origin-server-cert.pem'),\n      }\n    });\n\n    var req = https.request({\n      host: 'example.com',\n      port: 443,\n      agent: myAgent\n    });\n",
  "_id": "tunnel@0.0.1",
  "dist": {
    "shasum": "cd73e34957b24b2a4c1e435271b72e0df4df8985"
  },
  "_from": "tunnel@>= 0.0.1"
}
