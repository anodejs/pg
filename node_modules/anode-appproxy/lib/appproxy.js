var request = require('request');
var httpProxy = require('http-proxy');
var url = require('url');
var rebus = require('rebus')(process.env.ANODE_REBUS);

httpProxy.setMaxSockets(1000);

// creates an Internal RP for apps wishing to invoke
// requests to other apps through their internal endpoint
function AppProxy() {

  var self = this;

  self.map = function (appName, relativeUrl) {

    if (!appName) {
      throw new Error('Applicaiton name for app proxy is not specified');
    }
    if (appName.length <= 0) {
      throw new Error('Invalid application name for app proxy');
    }

    var reverseProxy = new httpProxy.RoutingProxy();
    reverseProxy.on('proxyError', function (err, req, res) {
      console.error('error: proxy error: ', err);
      res.writeHead(500, { 'Content-Type': 'text/plain' });
      res.write('sorry. proxy error: ', err);
      return res.end();
    });

    return function (req, res, next) {
      // If application name ends with a dot, it is a relative application.
      // Append the current application name.
      if (appName.charAt(appName.length - 1) === '.') {
        appName = appName + process.env.ANODE_APP;
      }
      var app = rebus.value.apps[appName];
      relativeUrl = relativeUrl || '';
      var internalUrl = url.parse(app.endpoints.internal);
      var host = internalUrl.hostname;
      var port = internalUrl.port;

      console.log('req.url:', req.url);

      // [amitu]
      // the req.url should not contain the full url, ie. http://.. but
      // only the relative path (without the app name. The app name is set in the header "x-farmjs-app")
      req.url = relativeUrl + req.url;
      console.log('host and port:', host, port, 'req.url:', req.url);

      // remove any custom header used by rp
      delete req.headers["x-original-url"];
      delete req.headers["x-anodejs-rewrite"];
      delete req.headers["x-forwarded-for"];
      delete req.headers["x-forwarded-port"];
      delete req.headers["x-forwarded-proto"];
      delete req.headers["x-farmjs-url"];
      delete req.headers["x-farmjs-reqid"];
      delete req.headers["x-farmjs-app"];
      delete req.headers["x-farmjs-instance"];
      delete req.headers["x-farmjs-rootpath"];

      req.headers["x-farmjs-app"] = appName;

      var options = { host: host, port: port };
      console.log("forwarding request to ", options, req.url);
      options.buffer = req.buffer;
      reverseProxy.proxyRequest(req, res, options);
    };
  };

  // If you need to use the app proxy and have other middlewares before it that perform async operations,
  // you must use this middleware prior to any other async-performing middleware.
  // Otherwise the events of the proxy request ('end', 'data') will get lost, and the request will hang
  // See https://github.com/nodejitsu/node-http-proxy for more info.
  self.asyncBuffer = function () {
    return function (req, res, next) {
      req.buffer = httpProxy.buffer(req);
      next();
    }
  }
}

module.exports = AppProxy;