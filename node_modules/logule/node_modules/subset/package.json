{
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "name": "subset",
  "description": "Generalized set operations and comparisons in the style of Haskell",
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/complement.git"
  },
  "keywords": [
    "compare",
    "comparing",
    "equality",
    "union",
    "intersect",
    "nub",
    "group",
    "generalized",
    "haskell",
    "Data.List",
    "Ord",
    "ES5"
  ],
  "main": "subset.js",
  "scripts": {
    "test": "tap ./test"
  },
  "dependencies": {},
  "devDependencies": {
    "tap": "~0.2.5"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "license": "MIT",
  "readme": "# Subset [![Build Status](https://secure.travis-ci.org/clux/subset.png)](http://travis-ci.org/clux/subset)\nSubset provides basic and generalized set operations for JavaScript.\nThey are inspired by a subset of the interface to Haskell's [Data.List](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-List.html), but optimized for JavaScript semantics and performance.\n\nIncluded are the basic operations:\n\n- maximum\n- minimum\n- insert\n- delete\n- intersect\n- union\n- nub\n- group\n- difference\n\ngeneralized operators using customized ordering:\n\n- maximumBy\n- minimumBy\n- insertBy\n\ngeneralized operations using customized equality:\n\n- deleteBy\n- intersectBy\n- unionBy\n- nubBy\n- groupBy\n- differenceBy\n\nand helpers to create custom ordering and equality comparators:\n\n- equality\n- comparing\n- compare\n\n\n## Usage\nAttach it to the short variable of choice:\n\n````javascript\nvar $ = require('subset');\n````\n\nand fire up the set engine:\n\n```javascript\n$.union([1,3,5], [4,5,6]); // [ 1, 3, 5, 4, 6 ]\n$.unionBy($.equality('a'), [{a:1},{a:3}], [{a:2},{a:3}]);\n// [ { a: 1 }, { a: 3 }, { a: 2 } ]\n\n$.intersect([1,2,3,4], [2,4,6,8]); // [ 2, 4 ]\n\n$.nub([1,3,2,4,1,2]); // [ 1, 3, 2, 4 ]\n\n$.group([1,2,2,3,5,5,2]); // [ [1], [2,2], [3], [5,5], [2] ]\n\n$.insert([1,2,3,4], 3); // [ 1, 2, 3, 3, 4 ]\n\n$.delete([1,2,3,2,3], 2); // [ 1, 3, 2, 3 ]\n\nvar nested = [[1,3,2], [2], [2,3]];\n$.maximumBy($.comparing('length'), nested); // [ 1, 3, 2 ]\n\nnested.sort($.comparing('length')); // [ [ 2 ], [ 2, 3 ], [ 1, 3, 2 ] ]\n\n[2, 100, 10, 4].sort(); // [10, 100, 2, 4] <- default lexicographical order\n[2, 100, 10, 4].sort($.compare()); // [2, 4, 10, 100] <- sensible numerical order\n````\n\nRead the [API](https://github.com/clux/subset/blob/master/api.md).\n\nNote that it is recommended to get it with the larger utility library:\n[interlude](https://github.com/clux/interlude) for which it was made.\n\n## Installation\n\n````bash\n$ npm install subset\n````\n\n## Running tests\nInstall development dependencies\n\n````bash\n$ npm install\n````\n\nRun the tests\n\n````bash\n$ npm test\n````\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "_id": "subset@0.1.1",
  "_from": "subset@~0.1.0"
}
