var request = require('request');
var nodeurl = require('url');
var rebus = require('rebus')(process.env.ANODE_REBUS);

// Schedule job
// The job will be called with POST verb on the calling application.
// Options:
//  relativeUrl - url relative to the application root (default - app root)
//  due - target datetime
//  unit - the length of the units for remaining parameters (default - 1 min)
//  period - recurring period for calling the job
//  duration - expected duration for the job. The job will be retried if not
//             successfully completed during this time.
exports.schedule = function (options, callback) {

  if (!options.due) {
    return callback(new Error('missing due time'));
  }

  if (!options.period) {
    return callback(new Error('missing period'));
  }

  if (!options.duration) {
    return callback(new Error('missing duration'));
  }

  var unit = options.unit || 60000; // 1 min

  var period = options.period * unit;
  var now = (new Date()).valueOf();
  var due = (new Date(options.due)).valueOf();
  if (due < now) {
    // Find closes occurence of the event in the future.
    due = due + Math.floor((now + period - 1 - due) / period) * period;
  }

  // Current application endpoint.
  var endpoint = rebus.value.apps[process.env.ANODE_APP].endpoints.internal;

  var job = {
    url:  endpoint + (options.relativeUrl || ''),
    due: (new Date(due)).toUTCString(),
    duration: options.duration,
    period: options.period,
    unit: unit
  };

  endpoint = nodeurl.parse(endpoint);

  // Insert job to chronos.
  request({
    method: 'PUT',
    json: true,
    body: job,
    headers: { 'content-type': 'application/json' },
    url: endpoint.protocol + '//' + endpoint.host + '/chronos.sys' // call chronos on the same instance
  },
  function(err, res) {
    if (err) {
      return callback(err);
    }
    if (res.statusCode !== 200) {
      return callback(new Error('Failed to create job, status=' + res.statusCode));
    }
    // Hurray!
    callback();
  });
}